<?php

namespace Exdeliver\Causeway\Domain\Services;

use Exdeliver\Causeway\Domain\Entities\Forum\Category;
use Exdeliver\Causeway\Infrastructure\Repositories\ForumCategoryRepository;
use Exdeliver\Causeway\Infrastructure\Repositories\ForumThreadRepository;
use Illuminate\Database\Eloquent\Collection;

/**
 * Class ForumService
 * @package Domain\Services
 */
final class ForumService extends AbstractService
{
    /** @var ForumThreadRepository */
    protected $threadRepository;

    /** @var ForumCategoryRepository */
    protected $categoryRepository;

    /**
     * PhotoAlbumService constructor.
     * @param ForumThreadRepository $forumThreadRepository
     * @param ForumCategoryRepository $forumCategoryRepository
     */
    public function __construct(ForumThreadRepository $forumThreadRepository, ForumCategoryRepository $forumCategoryRepository)
    {
        $this->threadRepository = $forumThreadRepository;
        $this->categoryRepository = $forumCategoryRepository;
    }

    /**
     * @param array $match
     * @param array $params
     * @return \Illuminate\Database\Eloquent\Model
     */
    public function updateOrCreateCategory(array $match, array $params)
    {
        $this->repository = $this->categoryRepository;
        $params['parent_id'] = !empty($params['parent_id']) ? $params['parent_id'] : null;
        return parent::updateOrCreate($match, $params); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $match
     * @param array $params
     * @return \Illuminate\Database\Eloquent\Model
     */
    public function updateOrCreateThread(array $match, array $params)
    {
        $this->repository = $this->threadRepository;
        $params['user_id'] = auth()->user()->id;
        return parent::updateOrCreate($match, $params); // TODO: Change the autogenerated stub
    }

    /**
     * @return Collection
     */
    public function getActiveCategories(): Collection
    {
        return $this->categoryRepository->whereNull('parent_id')->get();
    }

    /**
     * @param $direction
     * @param Category $category
     * @return int
     */
    public function setCategorySequence($direction, Category $category)
    {
        $categoriesByParent = Category::where('parent_id', $category->parent_id);

        foreach ($categoriesByParent->get() as $item) {
            if (isset($item->id)) {
                $condition = Category::findOrFail($item->id);
                $condition->sequence = $item->sequence ?? 0;
                $condition->save();
            }
        }

        $sequence = (int)$category->sequence;

        switch ($direction) {
            case 'up':
                $sequence--;
                break;
            case 'down':
                $sequence++;
                break;
        }

        $existingSequenceCategory = $categoriesByParent->where('sequence', $sequence)->first();

        if (isset($existingSequenceCategory)) {
            switch ($direction) {
                case 'up':
                    $sequence--;
                    break;
                case 'down':
                    $sequence++;
                    break;
            }
        }

        $category->sequence = $sequence;

        $category->save();
    }
}
